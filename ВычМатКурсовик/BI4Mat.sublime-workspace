{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"Sub",
				"Subtle"
			],
			[
				"la",
				"layout"
			],
			[
				"cou",
				"count-1"
			],
			[
				"alpabetG",
				"alpabetGlas"
			]
		]
	},
	"buffers":
	[
		{
			"contents": "#include \"opencv\\cv.h\"\n#include \"opencv\\highgui.h\"\n#pragma comment(lib, \"opencv_highgui231.lib\")\n#pragma comment(lib, \"opencv_core231.lib\")\n#pragma comment(lib, \"opencv_objdetect231.lib\")\n#include <iostream>\n//#include <highgui.h>\nusing namespace std;\n\nchar* gsp(IplImage *image, int x, int y)\n{\n	return image->imageData + y*image->width*3 + x*3;\n}\n\nvoid Frame(IplImage *image, CvRect *r)\n{\n	CvPoint pt1 = { r->x, r->y };\n	CvPoint pt2 = { r->x + r->width, r->y + r->height };\n	cvRectangle(image, pt1, pt2, CV_RGB(0,255,0), 3, 4, 0);\n}\n\nvoid Invert(IplImage *image, CvRect *r)\n{\n	int w = r->x+r->width, h = r->y+r->height, i, j;\n	for (j=r->y; j<=h-1; j++)\n	{\n		for (i=r->x; i<=w-1; i++)\n		{\n			char* p = gsp(image, i, j);\n			p[0] = 0xFF - p[0];\n			p[1] = 0xFF - p[1];\n			p[2] = 0xFF - p[2];\n		}\n	}\n}\n\nvoid GrayScale(IplImage *image, CvRect *rn)\n{\n	int w = rn->x+rn->width, h = rn->y+rn->height, i, j, r, g, b;\n	for (j=rn->y; j<=h-1; j++)\n	{\n		for (i=rn->x; i<=w-1; i++)\n		{\n			char *temp = gsp(image, i, j);\n			r = temp[0]; g = temp[1]; b = temp[2];\n			r = g = b = (unsigned char)(0.299*(double)r+0.587*(double)g+0.114*(double)b);\n			temp[0] = r; temp[1] = g; temp[2] = b;\n		}\n	}\n}\n\n\nvoid main()\n{ // Âûâîä âèäåî http://locv.ru/wiki/\n	cvNamedWindow( \"Example2\", CV_WINDOW_AUTOSIZE ); // Ñîçäàåì îêîøêî\n    CvCapture* capture = cvCreateFileCapture( \"D:\\\\77.avi\" ); // Îòêðûâàåì ôàéë\n    IplImage* frame; // Çäåñü áóäåò êàäð\n    while(1) {\n        frame = cvQueryFrame( capture ); // ×èòàåì êàäð èç ôàéëà\n        if( !frame ) break; // Åñëè êàäðîâ áîëüøå íåò - âûõîäèì\n        cvShowImage( \"Example2\", frame ); // Âûâîäèì êàäð\n        char c = cvWaitKey(33); // Æäåì 33ìñ\n        if( c == 27 ) break; // Åñëè íàæàëè Esc - âûõîäèì\n    }\n    cvReleaseCapture( &capture ); // Çàêðûâàåì ôàéë\n    cvDestroyWindow( \"Example2\" ); // È îêíî\n	\n	\n	\n	// Âûâîä êàðòèíêè\n/*	IplImage* img = cvLoadImage(\"D:\\\\foto.jpg\"); // Çàãðóæàåì èçîáðàæåíèå\ncvNamedWindow(\"Example1\", CV_WINDOW_AUTOSIZE); // Ñîçäà¸ì îêíî\ncvShowImage(\"Example1\", img); // Âûâîäèì êàðòèíêó â îêíî\ncvWaitKey(0); // Æä¸ì\ncvReleaseImage(&img); // Îñâîáîæäàåì ïàìÿòü èç ïîä êàðòèíêè\ncvDestroyWindow(\"Example1\"); // Óäàëÿåì îêíî\n*/	\n	\n/*	\n	  CvHaarClassifierCascade * pCascade = (CvHaarClassifierCascade*)cvLoad(\"haarcascade_frontalface_default.xml\", 0, 0, 0 );\n	 CvMemStorage * pStorage = cvCreateMemStorage(0);\n	CvSeq *pFaceRectSeq = 0; CvRect *r = 0;\n\n    CvCapture *capture = cvCaptureFromCAM(CV_CAP_ANY);\n    IplImage *frame = 0, *image = 0;\n	int key = 0, last = 0;\n\n    if (!pStorage || !pCascade || !capture)\n		cout << \"Initialization failed\" << endl;\n	else\n	{\n		cvNamedWindow(\"WebCamera\", CV_WINDOW_AUTOSIZE);\n		while(key != 27)\n		{\n			frame = cvQueryFrame(capture);\n			image = cvCloneImage(frame);\n			pFaceRectSeq = cvHaarDetectObjects(image, pCascade, pStorage, 1.1, 3, CV_HAAR_DO_CANNY_PRUNING, cvSize(75,75));\n			for(int i=0; i<(pFaceRectSeq? pFaceRectSeq->total:0); i++ )\n			{\n				r = (CvRect*)cvGetSeqElem(pFaceRectSeq, i);\n				switch(last)\n				{\n				case '1': Frame(image, r); break;\n				case '2': Invert(image, r); break;\n				case '3': GrayScale(image, r); break;\n				default: break;\n				}\n			}\n			cvShowImage(\"WebCamera\", image);\n			cvReleaseImage(&image);\n			key = cvWaitKey(1);\n			if (key != -1) last = key;\n		}\n		cvDestroyWindow(\"WebCamera\");\n		cvReleaseCapture(&capture);\n\n		cvReleaseHaarClassifierCascade(&pCascade);\n		cvReleaseMemStorage(&pStorage);\n	}*/\n}",
			"file": "/media/poriesto/STEAMOS/Новая папка/main.cpp",
			"file_size": -1,
			"file_write_time": -1,
			"settings":
			{
				"buffer_size": 3425,
				"line_ending": "Windows"
			}
		},
		{
			"file": "/home/poriesto/SnakeQT/SnakeQT/1.txt",
			"settings":
			{
				"buffer_size": 279,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/poriesto/SnakeQT/build-SnakeQT-Qt_5_2_1_gcc_64-Debug/pl.txt",
			"settings":
			{
				"buffer_size": 278,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/poriesto/Documents/Вычислительная математика.",
			"settings":
			{
				"buffer_size": 1157,
				"line_ending": "Unix"
			}
		},
		{
			"contents": "URxvt*foreground: #f2f2f2\nURxvt*background: #101010 \n! Normal ! \nblackURxvt*color0:  #6c6c6c\n! redURxvt*color1:  #e9897c! greenURxvt*color2:  #b6e77d! yellowURxvt*color3:  #ecebbe! blueURxvt*color4:  #7993a9! purpleURxvt*color5:  #ea96eb! cyanURxvt*color6:  #c9caec! whiteURxvt*color7:  #f2f2f2 ! Light ! blackURxvt*color8:  #747474! redURxvt*color9:  #f99286! greenURxvt*color10: #c3f786! yellowURxvt*color11: #fcfbcc! blueURxvt*color12: #b6defb! purpleURxvt*color13: #fba1fb! cyanURxvt*color14: #d7d9fc! whiteURxvt*color15: #e2e2e2",
			"settings":
			{
				"buffer_size": 533,
				"line_ending": "Unix",
				"name": "URxvt*foreground: #f2f2f2"
			}
		},
		{
			"contents": "*:cCSApprox.txt*  Bringing GVim colorschemes to the terminal!\n\n                                                     *csapprox* *csapprox.vim*\n\n                  _____ ____ ___                               ~\n                 / ___// __// _ |  ___   ___   ____ ___  __ __ ~\n                / /__ _\\ \\ / __ | / _ \\ / _ \\ / __// _ \\ \\ \\ / ~\n                \\___//___//_/ |_|/ .__// .__//_/   \\___//_\\_\\  ~\n                                /_/   /_/                      ~\n                                                  For Vim version 7.0 or newer\n                                                      Last changed 14 Sep 2012\n\n                               By Matt Wozniski\n                             godlygeek@gmail.com\n\n                              Reference Manual~\n\n                                                                *csapprox-toc*\n\n1. Introduction                                       |csapprox-intro|\n2. Requirements                                       |csapprox-requirements|\n3. Configuration                                      |csapprox-configure|\n4. Rationale/Design                                   |csapprox-design|\n5. Known Bugs and Limitations                         |csapprox-limitations|\n6. Appendix - Terminals and Palettes                  |csapprox-terminal-list|\n7. Changelog                                          |csapprox-changelog|\n8. Contact Info                                       |csapprox-author|\n\nThe functionality mentioned here is a plugin, see |add-plugin|.\nYou can avoid loading this plugin by setting the \"CSApprox_loaded\" global\nvariable in your |vimrc| file: >\n    :let g:CSApprox_loaded = 1\n\n==============================================================================\n1. Introduction                                               *csapprox-intro*\n\nIt's hard to find colorschemes for terminal Vim.  Most colorschemes are\nwritten to only support GVim, and don't work at all in terminal Vim.\n\nThis plugin makes GVim-only colorschemes Just Work in terminal Vim, as long\nas the terminal supports 88 or 256 colors - and most do these days.  This\nusually requires no user interaction (but see below for what to do if things\ndon't Just Work).  After getting this plugin happily installed, any time you\nuse :colorscheme it will do its magic and make the colorscheme Just Work.\n\nWhenever you change colorschemes using the :colorscheme command this script\nwill be executed.  It will take the colors that the scheme specified for use\nin the GUI and use an approximation algorithm to try to gracefully degrade\nthem to the closest color available in your terminal.  If you are running in\na GUI or if your terminal doesn't support 88 or 256 colors, no changes are\nmade.  Also, no changes will be made if the colorscheme seems to have been\nhigh color already.\n\nIf for some reason this transparent method isn't suitable to you (for instance\nif your environment can't be configured to meet the |csapprox-requirements|,\nor you need to work in Vim 6), another option is also available: using the\n|:CSApproxSnapshot| command to create a new GUI/88-/256-color terminal\ncolorscheme.  To use this command, a user would generally start GVim, choose a\ncolorscheme that sets up the desired colors, and then use |:CSApproxSnapshot|\nto create a new colorscheme based on those colors that works in high color\nterminals.  This method is more flexible than the transparent mode and works\nin more places, but also requires more user intervention, and makes it harder\nto deal with colorschemes being updated and such.\n                                                           *:CSApproxSnapshot*\nThe full syntax for the command is: >\n    :CSApproxSnapshot[!] /path/to/new/colorscheme\n<       For example: >\n    :CSApproxSnapshot ~/.vim/colors/foobar.vim\n<\nNOTE: The generated colorscheme will only work in 88- and 256-color terminals,\n      and in GVim.  It will not work at all in a terminal with 16 or fewer\n      colors.  There's just no reliable way to approximate down from\n      16,777,216 colors to 16 colors, especially without there being any\n      standard for what those 16 colors look like other than 'orange-ish',\n      'red-ish', etc.\n\nNOTE: Although |:CSApproxSnapshot| can be used in both GVim and terminal Vim,\n      the resulting colors might be slightly off when run from terminal Vim.\n      I can find no way around this; Vim internally sets different colors when\n      running in a terminal than running in the GUI, and there's no way for\n      terminal Vim to figure out what color would have been used in GVim.\n\n                                                                   *:CSApprox*\nA command is also provided to run the approximation manually.  This might be\nuseful if some colors were set outside of a colorscheme file, for instance.\nBy default, it will not change any colors unless no highlight group is set to\na color above 15, which is CSApprox's normal behavior.  This probably isn't\nuseful in most use cases, though.  On the other hand, if a ! is provided,\nCSApprox will skip that test and update the cterm value for every highlight\ngroup from the corresponding gui color.  Syntax:\n>\n    :CSApprox[!]\n<\n\n==============================================================================\n2. Requirements                                        *csapprox-requirements*\n\nFor CSApprox to work, there are 2 major requirements that must be met.\n\na) GUI support (or vim >= 7.3)          *csapprox-gui-support* *csapprox-+gui*\n\nNOTE This section only applies to vim versions before 7.3.000 - a modern vim\ndoes not need GUI support in order for CSApprox to function.\n\nIf CSApprox is being used to adjust a scheme's colors transparently, then the\nterminal \"vim\" binary that is being run must be built with GUI support (see\n|csapprox-limitations| for an explanation).  If |:CSApproxSnapshot| is being\nused to create a terminal colorscheme for high color terminals, then the\n\"vim\" binary being used to create the scheme must be built with +gui, but the\nscheme can be used in terminal \"vim\" binaries that weren't built with +gui.\n\nNOTE that creating snapshots with GVim will work better than making them with\nVim, and (obviously) all \"gvim\" binaries are built with +gui.\n\nUnfortunately, several Linux distributions only include GUI support in their\n\"gvim\" binary, and not in their \"vim\" binary.  You can check if GUI support is\navailable with the following command:\n    :echo has('gui')\n\nIf that prints 0, the first thing to try would be searching for a larger vim\npackage provided by your distribution, like \"vim-enhanced\" on RedHat/CentOS\nor \"vim-gtk\" or \"vim-gnome\" on Debian/Ubuntu.\n\nIf you are unable to obtain a \"vim\" binary that includes GUI support, but\nhave a \"gvim\" binary available, you can probably launch Vim with GUI support\nanyway by calling gvim with the |-v| flag in the shell: >\n    gvim -v\n\nIf the above works, you can remove the need to call \"gvim -v\" instead of \"vim\"\nall the time by creating a symbolic link from your \"gvim\" binary to \"vim\"\nsomewhere in your $PATH, for example:\n    sudo ln -s $(which gvim) $(which vim)\n\nIf launching as \"gvim -v\" doesn\"t work, and no package with GUI support is\navailable, you will need to compile Vim yourself and ensure that GUI support\nis included to use CSApprox in its transparent mode, or create a snapshotted\nscheme from GVim to use its snapshot mode.  If this is inconvenient for you,\nmake sure that the Vim maintainer for your distribution knows it; they made a\nconscious decision to build \"vim\" without +gui and \"gvim\" without terminal\nsupport.\n\nb) Properly configured terminal                            *csapprox-terminal*\n\nAs said above, many modern terminals support 88 or 256 colors, but most of\nthese default to setting $TERM to something generic (usually \"xterm\").  Since\nVim uses the value of the \"colors\" attribute for the current $TERM in terminfo\nto figure out the number of colors used internally as 't_Co', this plugin will\neither need for 't_Co' to be set to 88 or 256 in |vimrc|, or for $TERM to be\nset to something that implies high color support.  Possible choices include\n\"xterm-256color\" for 256 color support and \"rxvt-unicode\" for 88 color\nsupport.\n                                                              *csapprox-palettes*\nAlso, there are at least three different 256-color palettes in use.  Nearly\nall terminals use an xterm-compatible palette, so most users need not concern\nthemselves with this, with only two exceptions:  Eterm uses a slightly\ndifferent palette, and older Konsole (pre KDE 2.2.0) used a third palette.\nCSApprox has no reliable way to tell which palette your terminal uses, so it\nmakes some educated guesses:\n\n i)   If vim thinks that there are 88 colors available, CSApprox will use the\n      xterm/urxvt-compatible 88 color palette (I don't know of any other\n      88 color palette in use anywhere).\n\n ii)  If $TERM starts with \"Eterm\", CSApprox will approximate based on the\n      Eterm palette.\n\n iii) If $TERM starts with \"konsole\", CSApprox will use the legacy Konsole\n      palette if either \"kde4-config --kde-version\" or \"kde-config --version\"\n      reports that the KDE version on the system is less than 4.2.0.\n      Otherwise, it will use the xterm palette.\n\n iv)  If $TERM starts with \"xterm\" or \"screen\", then CSApprox looks for the\n      vim variables \"g:CSApprox_eterm\" and \"g:CSApprox_konsole\".\n      If g:CSApprox_eterm is true, CSApprox uses the Eterm palette.\n      If g:CSApprox_konsole is true, CSApprox uses the old konsole palette.\n      Otherwise, CSApprox uses the xterm palette.\n\n v)   For all other $TERM values, CSApprox uses the xterm palette.\n\n                                                   *csapprox-terminal-example*\nTo turn on high color support despite an incorrect $TERM, you can override\nt_Co (the vim name for the terminfo setting defining how many colors are\navailable) in your .vimrc, and set either CSApprox_konsole or CSApprox_eterm\nif appropriate.  You could put something like this into your |vimrc|:\n>\n    if (&term == 'xterm' || &term =~? '^screen') && hostname() == 'my-machine'\n        \" On my machine, I use an old Konsole with 256 color support\n        set t_Co=256\n        let g:CSApprox_konsole = 1\n    endif\n\nGnome Terminal, as of the time that I am writing this, doesn't support having\nthe terminal emulator set $TERM to something adequately descriptive.  In cases\nlike this, something like the following would be appropriate:\n>\n    if &term =~ '^\\(xterm\\|screen\\)$' && $COLORTERM == 'gnome-terminal'\n      set t_Co=256\n    endif\n\n==============================================================================\n3. Configuration                                          *csapprox-configure*\n\nThere are several global variables that can be set to configure the behavior\nof CSApprox.  They are listed roughly based on the likelihood that the end\nuser might want to know about them.\n\ng:CSApprox_loaded                                          *g:CSApprox_loaded*\n    If set in your |vimrc|, CSApprox is not loaded.  Has no effect on\n    snapshotted schemes.\n\ng:CSApprox_verbose_level                            *g:CSApprox_verbose_level*\n    When CSApprox is run, the 'verbose' option will be temporarily raised to\n    the value held in this variable unless it is already greater.  The default\n    value is 1, which allows CSApprox to default to warning whenever something\n    is wrong, even if it is recoverable, but allows the user to quiet us if he\n    wants by changing this variable to 0.  The most important messages will be\n    shown at verbosity level 1; some less important ones will be shown at\n    higher verbosity levels.  Has no effect on snapshotted schemes.\n\ng:CSApprox_fake_reverse                              *g:CSApprox_fake_reverse*\n    In gvim, setting a highlight group like \"Visual\" (the color of your visual\n    mode selection) to do reverse video results in it reversing the colors of\n    each character cell under it.  Some terminals don't support this and will\n    instead always use the default background color on the default foreground\n    color when asked for reverse video.  If this variable is set to a non-zero\n    number, CSApprox will change any request for reverse video to the \"Normal\"\n    group's bg color on the \"Normal\" group's fg color, instead of asking the\n    terminal to do reverse video.  This provides a middle ground for terminals\n    that don't properly support reverse video - it's worse than having the\n    terminal properly reverse the colors of each character cell, but it's\n    better than the broken behavior of some terminal emulators.  This was the\n    default behavior before CSApprox 4.0.\n\ng:CSApprox_eterm                                            *g:CSApprox_eterm*\n    If set to a non-zero number, CSApprox will use the Eterm palette when\n    'term' is set to \"xterm\" or begins with \"screen\".  Otherwise, the xterm\n    palette would be used.  This also affects snapshotted schemes.\n\ng:CSApprox_konsole                                        *g:CSApprox_konsole*\n    If set to a non-zero number, CSApprox will use the old Konsole palette\n    when 'term' is set to \"xterm\" or begins with \"screen\".  Otherwise, the\n    xterm palette would be used.  This also affects snapshotted schemes.\n\ng:CSApprox_attr_map                                      *g:CSApprox_attr_map*\n    Since some attributes (like 'guisp') can't be used in a terminal, and\n    others (like 'italic') are often very ugly in terminals, a generic way to\n    map between a requested attribute and another attribute is included.  This\n    variable should be set to a Dictionary, where the keys are strings\n    representing the attributes the author wanted set, and the values are the\n    strings that the user wants set instead.  If a value is '', it means the\n    attribute should just be ignored.  The default is to replace 'italic' with\n    'underline', and to use 'fg' instead of 'sp': >\n        let g:CSApprox_attr_map = { 'italic' : 'underline', 'sp' : 'fg' }\n<\n    Your author prefers disabling bold and italic entirely, so uses this: >\n        let g:CSApprox_attr_map = { 'bold' : '', 'italic' : '', 'sp' : 'fg' }\n<\n\n    Note: This transformation is considered at the time a snapshotted scheme\n          is created, rather than when it is used.\n\n    Note: You can only map an attribute representing a color to another\n          attribute representing a color; likewise with boolean attributes.\n          After all, sp -> bold and italic -> fg would be nonsensical.\n\n                          *g:CSApprox_hook_pre* *g:CSApprox_hook_{scheme}_pre*\n                        *g:CSApprox_hook_post* *g:CSApprox_hook_{scheme}_post*\ng:CSApprox_hook_pre\ng:CSApprox_hook_post\ng:CSApprox_hook_{scheme}_pre\ng:CSApprox_hook_{scheme}_post                                 *csapprox-hooks*\n    These variables provide a method for adjusting tweaking the approximation\n    algorithm, either for all schemes, or on a per scheme basis.  For\n    snapshotted schemes, these will only take effect when the snapshotted\n    scheme is created, rather than when it is used.  Each of these variables\n    may be set to either a String containing a command to be :execute'd, or a\n    List of such Strings.  The _pre hooks are executed before any\n    approximations have been done.  In order to affect the approximation at\n    this stage, you would need to change the gui colors for a group; the cterm\n    colors will then be approximated from those gui colors.  Example:\n>\n      let g:CSApprox_hook_pre = 'hi Comment guibg=#ffddff'\n<\n    The advantage to tweaking the colors at this stage is that CSApprox will\n    handle approximating the given gui colors to the proper cterm colors,\n    regardless of the number of colors the terminal supports.  The\n    disadvantage is that certain things aren't possible, including clearing\n    the background or foreground color for a group, selecting a precise cterm\n    color to be used, and overriding the mappings made by g:CSApprox_attr_map.\n    Another notable disadvantage is that overriding things at this level will\n    actually affect the gui colors, in case the :gui is used to start gvim\n    from the running vim instance.\n\n    To overcome these disadvantages, the _post hooks are provided.  These\n    hooks will be executed only after all approximations have been completed.\n    At this stage, in order to have changes appear the cterm* colors must be\n    modified.  For example:\n                                                       *csapprox-transparency*\n>\n      let g:CSApprox_hook_post = ['hi Normal  ctermbg=NONE ctermfg=NONE',\n                                \\ 'hi NonText ctermbg=NONE ctermfg=NONE' ]\n<\n    Setting g:CSApprox_hook_post as shown above will clear the background of\n    the Normal and NonText groups, forcing the terminal's default background\n    color to be used instead, including any pseudotransparency done by that\n    terminal emulator.  As noted, though, the _post functions do not allow\n    CSApprox to approximate the colors.  This may be desired, but if this is\n    an inconvenience the function named by g:CSApprox_approximator_function\n    can still be called manually.  For example:\n>\n      let g:CSApprox_hook_post = 'exe \"hi Comment ctermbg=\"'\n                      \\ . '. g:CSApprox_approximator_function(0xA0,0x50,0x35)'\n<\n    The _{scheme}_ versions are exactly like their counterparts, except that\n    they will only be executed if the value of g:colors_name matches the\n    scheme name embedded in the variable name.  They will be executed after\n    the corresponding hook without _{scheme}_, which provides a way to\n    override a less specific hook with a more specific one.  For example, to\n    clear the Normal and NonText groups, but only for the colorscheme\n    \"desert\", one could do the following:\n>\n    let g:CSApprox_hook_desert_post = ['hi Normal ctermbg=NONE ctermfg=NONE',\n                                    \\ 'hi NonText ctermbg=NONE ctermfg=NONE' ]\n<\n    One final example: If you want CSApprox to be active for nearly all\n    colorschemes, but want one or two particular schemes to be ignored, you\n    can take advantage of the CSApprox logic that skips over any color scheme\n    that is already high color by setting a color to a number above 255.  Note\n    that most colors greater than 15 will work, but some will not - 256 should\n    always work.  For instance, you can prevent CSApprox from modifying the\n    colors of the zellner colorscheme like this:\n>\n    let g:CSApprox_hook_zellner_pre = 'hi _FakeGroup ctermbg=256'\n<\n    NOTE: Any characters that would stop the string stored in g:colors_name\n          from being a valid variable name will be removed before the\n          _{scheme}_ hook is searched.  Basically, this means that first all\n          characters that are neither alphanumeric nor underscore will be\n          removed, then any leading digits will be removed.  So, for a\n          colorscheme named \"123 foo_bar-baz456.vim\", the hook searched for\n          will be, eg, g:CSApprox_hook_foo_barbaz456_post\n\ng:CSApprox_use_showrgb                                *g:CSApprox_use_showrgb*\n    By default, CSApprox will use a built in mapping of color names to values.\n    This optimization greatly helps speed, but means that colors addressed by\n    name might not match up perfectly between gvim (which uses the system's\n    real rgb database) and CSApprox (which uses the builtin database).  To\n    force CSApprox to try the systemwide database first, and only fall back on\n    the builtin database if it isn't available, set this variable non-zero.\n\ng:CSApprox_approximator_function            *g:CSApprox_approximator_function*\n    If the default approximation function doesn't work well enough, the user\n    (or another author wishing to extend this plugin) can write another\n    approximation function.  This function should take three numbers,\n    representing r, g, and b in decimal, and return the index on the color\n    cube that best matches those colors.  Assigning a |Funcref| to this\n    variable will override the default approximator with the one the Funcref\n    references.  This option will take effect at the time a snapshotted scheme\n    is created, rather than when it's used.\n\ng:CSApprox_redirfallback                            *g:CSApprox_redirfallback*\n    Until Vim 7.2.052, there was a bug in the Vim function synIDattr() that\n    made it impossible to determine syntax information about the |guisp|\n    attribute.  CSApprox includes a workaround for this problem, as well as a\n    test that ought to disable this workaround if synIDattr() works properly.\n    If this test should happen to give improper results somehow, the user can\n    force the behavior with this variable.  When set to 1, the workaround will\n    always be used, and when set to 0, synIDattr() is blindly used.  Needless\n    to say, if this automatic detection should ever fail, the author would\n    like to be notified!  This option will take effect at the time a\n    snapshotted scheme is created, rather than when it's used.\n\n==============================================================================\n4. Rationale/Design                                          *csapprox-design*\n\nThere is a wealth of colorschemes available for Vim.  Unfortunately, since\ntraditional terminal emulators have only supported 2, 8 or 16 colors,\ncolorscheme authors have tended to avoid writing colorschemes for terminal\nVim, sticking instead to GVim.  Even now that nearly every popular terminal\nsupports either 88 or 256 colors, few colorschemes are written to support\nthem.  This may be because the terminal color codes are just numbers from 0 to\n87 or 255 with no semantic meaning, or because the same number doesn't yield\nthe same color in all terminals, or simply because the colorscheme author\ndoesn't use the terminal and doesn't want to take the time to support\nterminals.\n\nWhatever the reason, this leaves users of many modern terminal emulators in\nthe awkward position of having a terminal emulator that supports many colors,\nbut having very few colorschemes that were written to utilize those colors.\n\nThis is where CSApprox comes in.  It attempts to fill this void allowing GVim\ncolorschemes to be used in terminal Vim.  CSApprox has two distinct modes of\noperation.  In the first mode, it attempts to make GVim colorschemes\ntransparently backwards compatible with terminal Vim in a high color terminal.\nBasically, whenever a colorscheme is run it should set some colors for the\nGUI, and this script will then run and attempt to figure out the closest color\navailable in the terminal's color palette to the color the scheme author asked\nfor.  Unfortunately, this does not work well all the time, and it has some\nlimitations (see |csapprox-limitations|).  Most of the time, however, this\ngives a very close approximation to the GVim colors without requiring any\nchanges to the colorscheme, or any user interaction.  It only requires that\nthe plugin be installed on the machine where Vim is being run, and that the\nuser's environment meets the needs specified at |csapprox-requirements|.  In\nthe event that this doesn't work, a second option - using |:CSApproxSnapshot|\nto create a new, 88-/256-color capable colorscheme - is available.\n\nIdeally, the aim is for CSApprox to be completely transparent to the user.\nThis is why the approach I take is entirely different from the GuiColorScheme\nscript, which will break on any but the simplest colorschemes.  Unfortunately,\ngiven the difficulty of determining exactly which terminal emulator the user\nis running, and what features it supports, and which color palette it's using,\nperfect transparency is difficult.  So, to this end, I've attempted to default\nto settings that make it unlikely that this script ever makes things worse\n(this is why I chose not to override t_Co to 256 myself), and I've attempted\nto make it easy to override my choice of defaults when necessary (through\ng:CSApprox_approximator_function, g:CSApprox_konsole, g:CSApprox_eterm,\ng:CSApprox_attr_map, etc).\n\nIn the event that the transparent solution is undesirable, or that the user's\nenvironment can't be configured to allow it (no GVim and no Vim with +gui, for\ninstance), |:CSApproxSnapshot| should provide a workable alternative - less\ncool, and less flexible, but it will work in more environments, and the\nsnapshotted colorscheme will even work in Vim 6.\n\nIf any of my design choices seem to be causing extra work with no real\nadvantages, though, I'd like to hear about it.  Feel free to email me with any\nimprovements or complaints.\n\n==============================================================================\n5. Known Bugs and Limitations                           *csapprox-limitations*\n\nGUI support or vim >= 7.3 is required for transparently adapting schemes.\n\n  There is nothing I can do about this given my chosen design.  CSApprox works\n  by being notified every time a colorscheme sets some GUI colors, then\n  approximating those colors to similar terminal colors.  Unfortunately, when\n  Vim < 7.3 is not built with GUI support, it doesn't bother to store the GUI\n  colors, so querying for them fails.  This leaves me completely unable to\n  tell what the colorscheme was trying to do.  See |csapprox-+gui| for some\n  potential workarounds if your distribution doesn't provide a Vim with +gui\n  and you can't upgrade to a modern vim.\n\nUser intervention is sometimes required for information about the terminal.\n\n  This is really an insurmountable problem.  Unfortunately, most terminal\n  emulators default to setting $TERM to 'xterm', even when they're not really\n  compatible with an xterm.  $TERM is really the only reliable way to\n  find anything at all out about the terminal you're running in, so there's no\n  way to know if the terminal supports 88 or 256 colors without either the\n  terminal telling me (using $TERM) or the user telling me (using 't_Co').\n  Similarly, unless $TERM is set to something that implies a certain color\n  palette ought to be used, there's no way for me to know, so I'm forced to\n  default to the most common, xterm's palette, and allow the user to override\n  my choice with |g:CSApprox_konsole| or |g:CSApprox_eterm|.  An example of\n  configuring Vim to work around a terminal where $TERM is set to something\n  generic without configuring the terminal properly is shown at\n  |csapprox-terminal-example|.\n\nSome colorschemes could fail to be converted if they try to be too smart.\n\n  A colorscheme could decide to only set colors for the mode Vim is running\n  in.  If a scheme only sets GUI colors when the GUI is running, instead of\n  using the usual approach of setting all colors and letting Vim choose which\n  to use, my approach falls apart.  My method for figuring out what the scheme\n  author wants the scheme to look like absolutely depends upon him setting the\n  GUI colors in all modes.  Fortunately, the few colorschemes that do this\n  seem to be, by and large, intended for 256 color terminals already, meaning\n  that skipping them is the proper behavior.  Note that this will only affect\n  transparently adapted schemes and snapshots made from terminal Vim;\n  snapshots made from GVim are immune to this problem.\n\nTransparently adapting schemes is slow.\n\n  For me, it takes Vim's startup time from 0.15 seconds to 0.35 seconds.  This\n  is probably still acceptable, but it is definitely worth trying to cut down\n  on this time in future versions.  Snapshotted schemes are faster to use,\n  since all of the hard evaluations are made when they're made instead of when\n  they're used.\n\n  NOTE: As of CSApprox 3.50, the overhead is down to about 0.10 seconds on my\n        test machine.\n\nIt isn't possible to approximate only a particular set of groups.\n\n  Unfortunately, the :CSApprox command will always update all groups, even if\n  only a small set of groups has changed.  A future improvement would be to\n  provide a function called, say, CSApprox(), that takes an optional list of\n  highlight groups (default: all) and only does approximation for those\n  groups.\n\n==============================================================================\n6. Appendix - Terminals and Palettes                  *csapprox-terminal-list*\n\nWhat follows is a list of terminals known to have and known not to have high\ncolor support.  This list is certainly incomplete; feel free to contact me\nwith more to add to either list.\n\n                                                     *csapprox-terminals-good*\n------------------------------- Good Terminals -------------------------------\n\nThe most recent versions of each of these terminals can be compiled with\neither 88 or 256 color support.\n\n                                                              *csapprox-xterm*\nxterm:\n    256 color palette\n    Colors composed of: [ 0x00, 0x5F, 0x87, 0xAF, 0xD7, 0xFF ]\n    Greys composed of:  [ 0x08, 0x12, 0x1C, 0x26, 0x30, 0x3A, 0x44, 0x4E,\n                          0x58, 0x62, 0x6C, 0x76, 0x80, 0x8A, 0x94, 0x9E,\n                          0xA8, 0xB2, 0xBC, 0xC6, 0xD0, 0xDA, 0xE4, 0xEE ]\n\n                                                              *csapprox-urxvt*\nrxvt-unicode (urxvt):\n    88 colors by default (but a patch is available to use xterm's palette)\n    Colors composed of: [ 0x00, 0x8B, 0xCD, 0xFF ]\n    Greys composed of:  [ 0x2E, 0x5C, 0x73, 0x8B, 0xA2, 0xB9, 0xD0, 0xE7 ]\n\n                                               *csapprox-pterm* *csapprox-putty*\nPuTTY (pterm; putty.exe):\n    256 colors; same palette as xterm\n\n                                                              *csapprox-mrxvt*\nMrxvt (mrxvt):\n    256 colors; same palette as xterm\n\n                                                     *csapprox-gnome-terminal*\nGNOME Terminal (gnome-terminal):\n    256 colors; same palette as xterm\n\n                                                            *csapprox-roxterm*\nROXTerm (roxterm):\n    256 colors; same palette as xterm\n\n                                                     *csapprox-xfce4-terminal*\nTerminal (xfce4-terminal):\n    256 colors; same palette as xterm\n\n                                                          *csapprox-iterm.app*\niTerm (iTerm.app):\n    256 colors; same palette as xterm\n                                                            *csapprox-konsole*\nKonsole (konsole):\n    256 color palette\n    Colors used to be composed of: [ 0x00, 0x33, 0x66, 0x99, 0xCC, 0xFF ]\n    As of KDE 2.2.0, colors match the xterm palette\n    Always used the same greyscales as xterm\n\n                                                              *csapprox-eterm*\neterm (Eterm):\n    256 color palette\n    Colors composed of: [ 0x00, 0x2A, 0x55, 0x7F, 0xAA, 0xD4 ]\n    Same greyscales as xterm\n    You should set the g:CSApprox_eterm variable unless $TERM begins with\n    'eterm', case insensitive\n\n                                                             *csapprox-screen*\nGNU Screen (screen):\n    256 color support.  Internally, uses the xterm palette, but this is only\n    relevant when running screen inside a terminal with fewer than 256 colors,\n    in which case screen will attempt to map between its own 256 color cube\n    and the colors supported by the real terminal to the best of its ability,\n    in much the same way as CSApprox maps between GUI and terminal colors.\n\n                                                      *csapprox-terminals-bad*\n-------------------------------- Bad Terminals -------------------------------\nThis is a list of terminals known _not_ to have high color support.  If any of\nthese terminals have high color support added at some point in the future,\nplease tell me and I'll update this information.\n\n                                                       *csapprox-terminal.app*\nTerminal.app (as of OS X 10.5.2)\n\n                                                              *csapprox-aterm*\naterm (as of version 1.00.01)\n\n                                                             *csapprox-xiterm*\nxiterm (as of version 0.5)\n\n                                                              *csapprox-wterm*\nwterm (as of version 6.2.9)\n\n                                                             *csapprox-mlterm*\nmlterm (as of version 2.9.4)\n\n                                                              *csapprox-kterm*\nkterm (as of version 6.2.0)\n\n==============================================================================\n7. Changelog                                              *csapprox-changelog*\n\n 4.00   14 Sep 2012   Fix CSApprox to not fail in vim 7.3 if not +gui, now\n                      that vim behaves properly even without +gui\n\n                      Provide the |:CSApprox| command to re-run CSApprox's\n                      approximation algorithm even if the colorscheme hasn't\n                      changed - useful for when the user has tweaked some\n                      colors manually.\n\n                      Better handling for the |inverse| (aka reverse) attribute\n                      for terminals that actually support it - and add the \n                      g:CSApprox_fake_reverse config variable to allow\n                      switching back to the old behavior for terminals that\n                      don't support real reverse video.\n\n                      Fix an issue where CSApprox would unconditionally leave\n                      'background' set to \"light\" - now it will leave\n                      'background' unchanged when it runs.\n\n                      Change the handling for Konsole to use the xterm palette\n                      by for KDE versions >= 2.2.0 - Konsole itself was\n                      changed to drop its old, slightly incompatible palette\n                      in KDE 2.2.0\n\n                      Fix a minor issue where running vim in recovery mode\n                      with |-r| would result in a complaint from CSApprox that\n                      the terminal didn't have enough colors even when it did.\n\n                      Fix an issue where, even if CSApprox had been disabled\n                      by setting |g:CSApprox_loaded|, a CSApprox error message\n                      could still be displayed.\n\n 3.50   01 Apr 2009   Fix a major regression that prevented the Eterm and\n                      Konsole colors from being correctly snapshotted\n\n                      Fix a related bug causing incorrect terminal colors\n                      after calling |:CSApproxSnapshot|\n\n                      Fix a bug causing black to be used instead of dark grey\n\n                      Have snapshots calculate g:colors_name programmatically\n\n                      Introduce many tweaks for better speed\n\n                      Clarify some things at :help csapprox-terminal-example\n\n                      Default to using our own list of rgb.txt colors rather\n                      than searching, for performance.  Add a new variable,\n                      g:CSApprox_use_showrgb, which forces us to try finding\n                      the colors using the \"showrgb\" program instead, and fall\n                      back on our own list if it isn't available\n\n                      Remove g:CSApprox_extra_rgb_txt_dirs - not needed in\n                      light of the above change\n\n 3.05   31 Jan 2009   Fix a harmless \"Undefined variable\" error in\n                      |:CSApproxSnapshot|\n\n                      Fix a behavioral bug when dumping out colors defined\n                      external to the scheme.\n\n 3.00   21 Jan 2009   Update the docs for better info on |:CSApproxSnapshot|\n\n                      Allow snapshotted schemes to work on Vim 6, and work\n                      properly in Konsole and Eterm (thanks David Majnemer!)\n\n                      Fix a bug causing a syntax error when using GVim while\n                      CSApprox was loaded.  (thanks again, David Majnemer!)\n\n 2.00   14 Dec 2008   Add a hooks system, allowing users to specify a command\n                      to run, either before or after the approximation\n                      algorithm is run, for all schemes or one specific one.\n\n                      Also rewrite |:CSApproxSnapshot| to be more maintainable\n                      and less of a hack, and fix several bugs that it\n                      contained.\n\n 1.50   19 Nov 2008   Add CSApproxSnapshot command, as an alternative solution\n                      when the user has gvim or a vim with gui support, but\n                      sometimes needs to use a vim without gui support.\n\n 1.10   28 Oct 2008   Enable running on systems with no rgb.txt (Penn Su)\n                      Begin distributing a copy of rgb.txt with CSApprox\n\n 1.00   04 Oct 2008   First public release\n\n 0.90   14 Sep 2008   Initial beta release\n\n==============================================================================\n8. Contact Info                                              *csapprox-author*\n\nYour author, a Vim nerd with some free time, was sick of seeing terminals\nalways get the short end of the stick.  He'd like to be notified of any\nproblems you find - after all, he took the time to write all this lovely\ndocumentation, and this plugin, which took more time than you could possibly\nimagine to get working transparently for every colorscheme he could get his\nhands on.  You can contact him with any problems or praises at\ngodlygeek@gmail.com\n\n==============================================================================\nvim:tw=78:fo=tcq2:isk=!-~,^*,^\\|,^\\\":ts=8:ft=help:norl:\n",
			"file": "/home/poriesto/.vim/doc/CSApprox.txt",
			"file_size": 37521,
			"file_write_time": 129920741500000000,
			"settings":
			{
				"buffer_size": 37523,
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"command_palette":
	{
		"height": 392.0,
		"selected_items":
		[
		],
		"width": 392.0
	},
	"console":
	{
		"height": 0.0,
		"history":
		[
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"file_history":
	[
		"/home/poriesto/Downloads/QTVS2013Addin.zip",
		"/home/poriesto/Documents/lab3n2/src/lab3n2.java",
		"/home/poriesto/.Xdefaults",
		"/home/poriesto/idea-IC-135.475/Install-Linux-tar.txt",
		"/home/poriesto/1",
		"/home/poriesto/Downloads/Desktop.rar",
		"/home/poriesto/QT-OpenGL-Labs/scene1_1.cpp",
		"/home/poriesto/QT-OpenGL-Labs/scene1_1.h",
		"/home/poriesto/QT-OpenGL-Labs/scene1_2.cpp",
		"/home/poriesto/QT-OpenGL-Labs/scene1_2.h",
		"/home/poriesto/QT-OpenGL-Labs/scene1_3.cpp",
		"/home/poriesto/QT-OpenGL-Labs/scene1_3.h",
		"/home/poriesto/QT-OpenGL-Labs/scene1_4.cpp",
		"/home/poriesto/QT-OpenGL-Labs/scene1_4.h",
		"/home/poriesto/QT-OpenGL-Labs/scene1_5.cpp",
		"/home/poriesto/QT-OpenGL-Labs/scene1_5.h",
		"/home/poriesto/Documents/6.txt",
		"/home/poriesto/configs-master/README",
		"/home/poriesto/Documents/ПО Posix.",
		"/home/poriesto/Documents/Вычислительная математика.",
		"/home/poriesto/Documents/ТАА",
		"/home/poriesto/Documents/Теория вероятности",
		"/home/poriesto/configs-master/scripts/conkyrc",
		"/home/poriesto/configs-master/jumanjirc",
		"/home/poriesto/idea-IC-133.696/Install-Linux-tar.txt",
		"/home/poriesto/Downloads/vertexArray/src/glut/readme.txt",
		"/home/poriesto/Downloads/subtly-e1262140937e/INSTALL",
		"/home/poriesto/1.txt",
		"/home/poriesto/su",
		"/home/poriesto/er-qtile.txt",
		"/home/poriesto/:::w",
		"/home/poriesto/GTA Vice City User Files/gta_vc.set",
		"/home/poriesto/Documents/POSIX1",
		"/home/poriesto/Documents/lab3n2/out/production/lab3n2/debug.txt",
		"/home/poriesto/Documents/lab1n2-Java/lab1n2.iml",
		"/home/poriesto/Documents/lab1n2-Java/src/lab1n2.java",
		"/home/poriesto/makefile",
		"/home/poriesto/BMP LABA/bmpeshka/bmp.cpp",
		"/home/poriesto/scripts/NFS4.sh",
		"/home/poriesto/scripts/GTAIII.sh",
		"/home/poriesto/scripts/GTAVC.sh",
		"/home/poriesto/scripts/GTA-SA.sh",
		"/home/poriesto/.bashrc",
		"/home/poriesto/hs_err_pid2869.log",
		"/media/poriesto/NetworkHDD/GTA_SA_1.01/Инструкция.txt",
		"/home/poriesto/scripts/study/2.sh",
		"/home/poriesto/.config/subtle/subtle.rb",
		"/home/poriesto/.cache/.fr-mupKvK/sublets-8ce37da99f14/cpu/cpu.spec",
		"/etc/xdg/subtle/subtle.rb",
		"/home/poriesto/.config/subtle/.hg_archival.txt",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/makefile",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/calcmd.cpp",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/calcmd.h",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/Data.cpp",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/Data.h",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/Data.h.gch",
		"/home/poriesto/Documents/Bi4Mat/ВычМатКурсовик/main.cpp",
		"/home/poriesto/Documents/main.cpp",
		"/home/poriesto/Downloads/xdefaults-urxvt",
		"/home/poriesto/.config/awesome/rc.lua",
		"/home/poriesto/workspace/OPM/src/OPM.c",
		"/home/poriesto/rtos/test.cpp",
		"/home/poriesto/rtos/defs.h",
		"/home/poriesto/rtos/global.cpp",
		"/home/poriesto/rtos/os.cpp",
		"/home/poriesto/rtos/resource.cpp",
		"/home/poriesto/rtos/rtos_api.h",
		"/home/poriesto/rtos/sys.h",
		"/home/poriesto/rtos/task.cpp",
		"/home/poriesto/workspace/CDLApp/src/CDLApp.java",
		"/media/poriesto/WINSETUP/ОС реального времени (Арх. ВС)/rtos/sys.h",
		"/home/poriesto/workspace/RTOS/src/defs.h",
		"/home/poriesto/workspace/RTOS/src/rtos_api.h",
		"/home/poriesto/workspace/RTOS/src/test.cpp",
		"/home/poriesto/workspace/RTOS/src/RTOS.cpp",
		"/home/poriesto/workspace/RTOS/src/global.cpp",
		"/home/poriesto/workspace/RTOS/src/os.cpp",
		"/home/poriesto/workspace/RTOS/src/resource.cpp",
		"/home/poriesto/workspace/RTOS/src/task.cpp",
		"/home/poriesto/workspace/RTOS/src/sys.h",
		"/home/poriesto/.config/awesome/rc1.lua",
		"/home/poriesto/expAWS/rc.lua",
		"/home/poriesto/awesome/rc.lua",
		"/home/poriesto/SnakeQT/SnakeQT/mainwindow.cpp",
		"/home/poriesto/expAWS/readme.md",
		"/home/poriesto/SnakeQT/SnakeQT/scene3d.h",
		"/home/poriesto/SnakeQT/SnakeQT/scene3d.cpp",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/oglgfx.cpp",
		"/home/poriesto/build-SnakeQTGUI-Qt_5_2_1_gcc_64_temporary-Debug/QT-OpenGL-Labs/scene3d.h",
		"/home/poriesto/build-SnakeQTGUI-Qt_5_2_1_gcc_64_temporary-Debug/QT-OpenGL-Labs/scene3d.cpp",
		"/home/poriesto/build-SnakeQTGUI-Qt_5_2_1_gcc_64_temporary-Debug/QT-OpenGL-Labs/main.cpp",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/Win32Project1.cpp",
		"/home/poriesto/SnakeQT/SnakeQT/SnakeGameSource/oglgfx.h",
		"/home/poriesto/SnakeQT/SnakeQT/SnakeGameSource/oglgfx.cpp",
		"/home/poriesto/QT_OpenGL_lesson1-master/mainwindow.h",
		"/home/poriesto/QT_OpenGL_lesson1-master/mainwindow.cpp",
		"/home/poriesto/SnakeQT/build-SnakeQT-Qt_5_2_1_gcc_64-Debug/Makefile",
		"/home/poriesto/workspace/SnakeGameSource/congfx.cpp",
		"/home/poriesto/workspace/SnakeGameSource/congfx.h",
		"/home/poriesto/workspace/SnakeGameSource/snake.h",
		"/home/poriesto/Desktop/words.java",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/resource.h",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/Win32Project1.h",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/oglgfx.h",
		"/home/poriesto/-",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/congfx.h",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/congfx.cpp",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/stdafx.h",
		"/home/poriesto/SnakeQT/build-SnakeQT-Qt_5_2_1_gcc_64-Debug/pl.txt",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/OptionsModule.cpp",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/OptionsModule.h",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/StatModule.h",
		"/home/poriesto/Documents/SuperSnake/Win32Project1/StatModule.cpp",
		"/home/poriesto/config.txt",
		"/home/poriesto/bck_qtile",
		"/home/poriesto/NFS3.sh",
		"/home/poriesto/NFS4.sh",
		"/home/poriesto/.config/subtle/ruby/levenshtein.rb",
		"/home/poriesto/.config/subtle/ruby/launcher.rb",
		"/home/poriesto/.cache/.fr-0kJFHD/subtle-contrib-65d7917117a2/ruby/launcher.rb",
		"/home/poriesto/.config/qtile/config.py",
		"/home/poriesto/Downloads/vim-airline-master/README.md",
		"/home/poriesto/.vimrc",
		"/home/poriesto/.cache/.fr-Yt6nPv/subtle-contrib-65d7917117a2/.hg_archival.txt",
		"/home/poriesto/launcher.rb",
		"/home/poriesto/.cache/.fr-oCRNqC/subtle-contrib-65d7917117a2/.hg_archival.txt",
		"/home/poriesto/.cache/.fr-fOY7Zo/subtle-contrib-65d7917117a2/LICENSE",
		"/home/poriesto/configs-master/ratpoisonrc"
	],
	"find":
	{
		"height": 35.0
	},
	"find_in_files":
	{
		"height": 0.0,
		"where_history":
		[
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"Scene1_2",
			"right_layout:add(",
			"myvolumewidget",
			"init",
			"putCube",
			"drawAxis",
			"drawElements",
			"drawElement",
			"putCube",
			"drawCube",
			"init",
			"lGL",
			"install",
			"http://poriesto.no-ip.org",
			"http://poriesto.no-ip.org//",
			"http://192.168.1.1:8200"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"Scene1_3",
			"http://poriesto.no-ip.org:8200",
			"http://poriesto.no-ip.org/"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 5,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/media/poriesto/STEAMOS/Новая папка/main.cpp",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3425,
						"regions":
						{
						},
						"selection":
						[
							[
								3425,
								3425
							]
						],
						"settings":
						{
							"syntax": "Packages/C++/C++.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/poriesto/SnakeQT/SnakeQT/1.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 279,
						"regions":
						{
						},
						"selection":
						[
							[
								279,
								279
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/poriesto/SnakeQT/build-SnakeQT-Qt_5_2_1_gcc_64-Debug/pl.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 278,
						"regions":
						{
						},
						"selection":
						[
							[
								278,
								278
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/poriesto/Documents/Вычислительная математика.",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1157,
						"regions":
						{
						},
						"selection":
						[
							[
								1157,
								1157
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 351.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 4,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 533,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"auto_name": "URxvt*foreground: #f2f2f2",
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 5,
					"file": "/home/poriesto/.vim/doc/CSApprox.txt",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 37523,
						"regions":
						{
						},
						"selection":
						[
							[
								13273,
								13273
							]
						],
						"settings":
						{
							"syntax": "Packages/Text/Plain text.tmLanguage"
						},
						"translation.x": 0.0,
						"translation.y": 2886.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 21.0
	},
	"input":
	{
		"height": 0.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.exec":
	{
		"height": 23.0
	},
	"output.find_results":
	{
		"height": 0.0
	},
	"project": "BI4Mat.sublime-project",
	"replace":
	{
		"height": 64.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"selected_items":
		[
		],
		"width": 0.0
	},
	"settings":
	{
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 135.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
